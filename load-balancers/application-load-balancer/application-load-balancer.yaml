AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Example of using Application Load Balancer

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id

  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets that are used by Application Load Balancer cluster.

Globals:
  Function:
    CodeUri: bin/Release/netcoreapp3.1/publish

Resources:

  HelloDotnetLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AwsLambdaDotnet.Functions::AwsLambdaDotnet.Functions.FunctionClass::Invoke
      Runtime: dotnetcore3.1
      MemorySize: 1024
      Timeout: 10

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all http traffic.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AlbLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HelloDotnetLambda.Arn
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Ref LambdaTargetGroup

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref AlbSecurityGroup
      Subnets: !Ref PublicSubnets

  LambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt HelloDotnetLambda.Arn

  AlbListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LambdaTargetGroup